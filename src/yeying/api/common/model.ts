// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: yeying/api/common/model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  ApiCodeEnum,
  apiCodeEnumFromJSON,
  apiCodeEnumToJSON,
  ApplicationCodeEnum,
  applicationCodeEnumFromJSON,
  applicationCodeEnumToJSON,
  ServiceCodeEnum,
  serviceCodeEnumFromJSON,
  serviceCodeEnumToJSON,
} from "./code";

export const protobufPackage = "yeying.api.common";

export interface ApplicationMetadata {
  /** 应用所有者 */
  owner: string;
  /** 身份所在网络 */
  network: string;
  /** 身份地址 */
  address: string;
  /** 应用身份 */
  did: string;
  /** 应用版本 */
  version: number;
  /** 应用哈希 */
  hash: string;
  /** 应用名称 */
  name: string;
  /** 应用编号 */
  code: ApplicationCodeEnum;
  /** 应用描述 */
  description: string;
  /** 访问路径 */
  location: string;
  /** 应用依赖的服务编码，用,隔开 */
  serviceCodes: ServiceCodeEnum[];
  /** 应用头像 */
  avatar: string;
  /** 应用创建时间 */
  createdAt: string;
  /** 应用更新时间 */
  updatedAt: string;
  /** 签名 */
  signature: string;
}

export interface ServiceMetadata {
  /** 服务所有者 */
  owner: string;
  /** 服务所在网络 */
  network: string;
  /** 服务所在网络地址 */
  address: string;
  /** 服务身份 */
  did: string;
  /** 服务版本 */
  version: number;
  /** 服务名称 */
  name: string;
  /** 服务描述 */
  description: string;
  /** 服务编码 */
  code: ServiceCodeEnum;
  /** 服务apis */
  apiCodes: ApiCodeEnum[];
  /** 服务代理 */
  proxy: string;
  /** 服务grpc地址 */
  grpc: string;
  /** 服务头像 */
  avatar: string;
  /** 服务创建时间点 */
  createdAt: string;
  /** 服务修改时间点 */
  updatedAt: string;
  /** 签名 */
  signature: string;
}

function createBaseApplicationMetadata(): ApplicationMetadata {
  return {
    owner: "",
    network: "",
    address: "",
    did: "",
    version: 0,
    hash: "",
    name: "",
    code: 0,
    description: "",
    location: "",
    serviceCodes: [],
    avatar: "",
    createdAt: "",
    updatedAt: "",
    signature: "",
  };
}

export const ApplicationMetadata: MessageFns<ApplicationMetadata> = {
  encode(message: ApplicationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.network !== "") {
      writer.uint32(18).string(message.network);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    if (message.did !== "") {
      writer.uint32(34).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    if (message.hash !== "") {
      writer.uint32(50).string(message.hash);
    }
    if (message.name !== "") {
      writer.uint32(58).string(message.name);
    }
    if (message.code !== 0) {
      writer.uint32(64).int32(message.code);
    }
    if (message.description !== "") {
      writer.uint32(74).string(message.description);
    }
    if (message.location !== "") {
      writer.uint32(82).string(message.location);
    }
    writer.uint32(90).fork();
    for (const v of message.serviceCodes) {
      writer.int32(v);
    }
    writer.join();
    if (message.avatar !== "") {
      writer.uint32(98).string(message.avatar);
    }
    if (message.createdAt !== "") {
      writer.uint32(106).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(114).string(message.updatedAt);
    }
    if (message.signature !== "") {
      writer.uint32(122).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.network = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 11: {
          if (tag === 88) {
            message.serviceCodes.push(reader.int32() as any);

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.serviceCodes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApplicationMetadata {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      code: isSet(object.code) ? applicationCodeEnumFromJSON(object.code) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      serviceCodes: globalThis.Array.isArray(object?.serviceCodes)
        ? object.serviceCodes.map((e: any) => serviceCodeEnumFromJSON(e))
        : [],
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: ApplicationMetadata): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.code !== 0) {
      obj.code = applicationCodeEnumToJSON(message.code);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.serviceCodes?.length) {
      obj.serviceCodes = message.serviceCodes.map((e) => serviceCodeEnumToJSON(e));
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationMetadata>, I>>(base?: I): ApplicationMetadata {
    return ApplicationMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationMetadata>, I>>(object: I): ApplicationMetadata {
    const message = createBaseApplicationMetadata();
    message.owner = object.owner ?? "";
    message.network = object.network ?? "";
    message.address = object.address ?? "";
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    message.hash = object.hash ?? "";
    message.name = object.name ?? "";
    message.code = object.code ?? 0;
    message.description = object.description ?? "";
    message.location = object.location ?? "";
    message.serviceCodes = object.serviceCodes?.map((e) => e) || [];
    message.avatar = object.avatar ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseServiceMetadata(): ServiceMetadata {
  return {
    owner: "",
    network: "",
    address: "",
    did: "",
    version: 0,
    name: "",
    description: "",
    code: 0,
    apiCodes: [],
    proxy: "",
    grpc: "",
    avatar: "",
    createdAt: "",
    updatedAt: "",
    signature: "",
  };
}

export const ServiceMetadata: MessageFns<ServiceMetadata> = {
  encode(message: ServiceMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.network !== "") {
      writer.uint32(18).string(message.network);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    if (message.did !== "") {
      writer.uint32(34).string(message.did);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.code !== 0) {
      writer.uint32(64).int32(message.code);
    }
    writer.uint32(74).fork();
    for (const v of message.apiCodes) {
      writer.int32(v);
    }
    writer.join();
    if (message.proxy !== "") {
      writer.uint32(82).string(message.proxy);
    }
    if (message.grpc !== "") {
      writer.uint32(90).string(message.grpc);
    }
    if (message.avatar !== "") {
      writer.uint32(98).string(message.avatar);
    }
    if (message.createdAt !== "") {
      writer.uint32(106).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(114).string(message.updatedAt);
    }
    if (message.signature !== "") {
      writer.uint32(122).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.network = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.did = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.apiCodes.push(reader.int32() as any);

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.apiCodes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.proxy = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.grpc = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceMetadata {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      did: isSet(object.did) ? globalThis.String(object.did) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      code: isSet(object.code) ? serviceCodeEnumFromJSON(object.code) : 0,
      apiCodes: globalThis.Array.isArray(object?.apiCodes)
        ? object.apiCodes.map((e: any) => apiCodeEnumFromJSON(e))
        : [],
      proxy: isSet(object.proxy) ? globalThis.String(object.proxy) : "",
      grpc: isSet(object.grpc) ? globalThis.String(object.grpc) : "",
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: ServiceMetadata): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.did !== "") {
      obj.did = message.did;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.code !== 0) {
      obj.code = serviceCodeEnumToJSON(message.code);
    }
    if (message.apiCodes?.length) {
      obj.apiCodes = message.apiCodes.map((e) => apiCodeEnumToJSON(e));
    }
    if (message.proxy !== "") {
      obj.proxy = message.proxy;
    }
    if (message.grpc !== "") {
      obj.grpc = message.grpc;
    }
    if (message.avatar !== "") {
      obj.avatar = message.avatar;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceMetadata>, I>>(base?: I): ServiceMetadata {
    return ServiceMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceMetadata>, I>>(object: I): ServiceMetadata {
    const message = createBaseServiceMetadata();
    message.owner = object.owner ?? "";
    message.network = object.network ?? "";
    message.address = object.address ?? "";
    message.did = object.did ?? "";
    message.version = object.version ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.code = object.code ?? 0;
    message.apiCodes = object.apiCodes?.map((e) => e) || [];
    message.proxy = object.proxy ?? "";
    message.grpc = object.grpc ?? "";
    message.avatar = object.avatar ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
